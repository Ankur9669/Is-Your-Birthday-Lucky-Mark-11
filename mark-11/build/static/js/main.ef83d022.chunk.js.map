{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","number","setNumber","month","setMonth","date","setDate","year","setYear","verdict","setVerdict","messageToBeShownToTheUser","setMessageToBeShownToTheUser","className","class","for","onSubmit","e","preventDefault","totalSumOfDigits","tempMonth","tempDate","tempYear","Math","floor","console","log","target","reset","handleSubmit","type","onChange","date1","Date","value","getMonth","getDate","getFullYear","handleDateChange","required","handleNumberChange","href","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMA6GeA,MA1Gf,WAEE,MAA2BC,mBAAS,GAApC,mBAAMC,EAAN,KAAcC,EAAd,KACA,EAAyBF,mBAAS,GAAlC,mBAAMG,EAAN,KAAaC,EAAb,KACA,EAAuBJ,mBAAS,GAAhC,mBAAMK,EAAN,KAAYC,EAAZ,KACA,EAAuBN,mBAAS,GAAhC,mBAAMO,EAAN,KAAYC,EAAZ,KACA,EAA6BR,oBAAS,GAAtC,mBAAMS,EAAN,KAAeC,EAAf,KACA,EAAiEV,mBAAS,IAA1E,mBAAMW,EAAN,KAAiCC,EAAjC,KAgDA,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAY,YAAjB,UACE,wBAAQC,MAAQ,SAAhB,8CAEA,sBAAKD,UAAY,QAAjB,UACE,qDADF,qCAIA,uBAAOE,IAAM,cAAcF,UAAY,0BAAvC,kEAGA,uBAAMG,SAAY,SAACC,GAAD,OA/CxB,SAAsBA,GAEpBA,EAAEC,iBACFR,GAAW,GAKX,IAJA,IAAIS,EAAmB,EACnBC,EAAYjB,EACZkB,EAAWhB,EACXiB,EAAWf,EACTa,EAAY,GAEhBD,GAAuCC,EAAY,GACnDA,EAAYG,KAAKC,MAAMJ,EAAY,IAErC,KAAMC,EAAW,GAEfF,GAAuCE,EAAW,GAClDA,EAAWE,KAAKC,MAAMH,EAAW,IAEnC,KAAMC,EAAW,GAEfH,GAAuCG,EAAW,GAClDA,EAAWC,KAAKC,MAAMF,EAAW,IAEnCG,QAAQC,IAAI,iBAAmBP,GAI7BP,EAHCO,EAAmBlB,IAAW,EAGF,eAIA,kBAE/BgB,EAAEU,OAAOC,QAcoBC,CAAaZ,IAAtC,UACE,uBAAOF,IAAM,aAAaF,UAAY,QAAtC,sCACA,uBAAOiB,KAAO,OAAOjB,UAAY,QAAQkB,SAAY,SAACd,GAAD,OA5D7D,SAA0BA,GAExB,IAAIe,EAAQ,IAAIC,KAAKhB,EAAEU,OAAOO,OAC9B9B,EAAS4B,EAAMG,WAAa,GAC5B7B,EAAQ0B,EAAMI,WACd5B,EAAQwB,EAAMK,eAuDoDC,CAAiBrB,IAAIsB,UAAQ,IACzF,uBAAOxB,IAAM,eAAeF,UAAY,QAAxC,uCACA,uBAAOiB,KAAO,SAASjB,UAAY,QAAQkB,SAAY,SAACd,GAAD,OAvD/D,SAA4BA,GAE1Bf,EAAUe,EAAEU,OAAOO,OAqDiDM,CAAmBvB,IAAIsB,UAAQ,IAC7F,wBAAQT,KAAO,SAASjB,UAAY,SAApC,sBAGDJ,GACC,qBAAKI,UAAY,UAAjB,SACGF,IAIL,yBAAQG,MAAQ,SAAhB,UACA,qBAAKA,MAAQ,gBAAb,iCACA,qBAAIA,MAAQ,cAAZ,UACI,oBAAIA,MAAQ,cAAZ,SACI,mBAAG2B,KAAO,+BAAV,SACI,qBAAKC,IAAM,mBAAmB5B,MAAQ,aAG9C,oBAAIA,MAAQ,cAAZ,SACI,mBAAG2B,KAAO,qDAAV,SACI,qBAAKC,IAAM,qBAAqB5B,MAAQ,aAGhD,oBAAIA,MAAQ,cAAZ,SACI,mBAAG2B,KAAO,IAAV,SACI,qBAAKC,IAAM,kBAAkB5B,MAAQ,yBCvF1C6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ef83d022.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\nfunction App()\n{  \n  const[number, setNumber] = useState(0);\n  const[month, setMonth] = useState(0);\n  const[date, setDate] = useState(0);\n  const[year, setYear] = useState(0);\n  const[verdict, setVerdict] = useState(false);\n  const[messageToBeShownToTheUser, setMessageToBeShownToTheUser] = useState(\"\");\n\n  function handleDateChange(e)\n  {\n    let date1 = new Date(e.target.value);\n    setMonth(date1.getMonth() + 1);\n    setDate(date1.getDate());\n    setYear(date1.getFullYear());\n  }\n  function handleNumberChange(e)\n  {\n    setNumber(e.target.value);\n  }\n  function handleSubmit(e)\n  {\n    e.preventDefault();//This is to prevent the default behaviour of reloding the page\n    setVerdict(true);//This is to show the message container to the user\n    let totalSumOfDigits = 0;\n    let tempMonth = month;\n    let tempDate = date;\n    let tempYear = year;\n    while(tempMonth > 0)\n    {\n      totalSumOfDigits = totalSumOfDigits + (tempMonth % 10);\n      tempMonth = Math.floor(tempMonth / 10);\n    }\n    while(tempDate > 0)\n    {\n      totalSumOfDigits = totalSumOfDigits + (tempDate % 10);\n      tempDate = Math.floor(tempDate / 10);\n    }\n    while(tempYear > 0)\n    {\n      totalSumOfDigits = totalSumOfDigits + (tempYear % 10);\n      tempYear = Math.floor(tempYear / 10);\n    }\n    console.log(\"Total Sum is: \" + totalSumOfDigits);\n    if(totalSumOfDigits % number === 0)\n    {\n      //console.log(\"Lucky number\");\n      setMessageToBeShownToTheUser(\"Lucky Number\");\n    }\n    else{\n      //console.log(\"unlucky number\");\n      setMessageToBeShownToTheUser(\"Unlucky Number\");\n    }\n    e.target.reset();\n  }\n  return (\n    <div className=\"App\">\n      <div className = \"container\">\n        <header class = \"header\">Is Your Birthday Lucky?(Mark-11)</header>\n\n        <div className = \"alert\">\n          <strong>Privacy Notice!</strong> We are not storing your data..\n        </div>\n\n        <label for = \"description\" className = \"label label-description\">Enter your birthdate and \n        lucky number to continue...</label>\n\n        <form onSubmit = {(e) => handleSubmit(e)}>\n          <label for = \"birth-date\" className = \"label\">Select your birth date: </label>\n          <input type = \"date\" className = \"input\" onChange = {(e) => handleDateChange(e)} required></input>\n          <label for = \"lucky-number\" className = \"label\">Enter your lucky number: </label>\n          <input type = \"number\" className = \"input\" onChange = {(e) => handleNumberChange(e)} required></input>\n          <button type = \"submit\" className = \"button\">Check</button>\n        </form>\n\n        {verdict && \n          <div className = \"message\">\n            {messageToBeShownToTheUser}\n          </div>\n        }\n\n        <footer class = \"footer\">\n        <div class = \"footer-header\">Connect with me on!</div>\n        <ul class = \"footer-list\">\n            <li class = \"list-inline\">\n                <a href = \"https://github.com/Ankur9669\">\n                    <img src = \"/github-icon.svg\" class = \"icon\"/>\n                </a>\n            </li>\n            <li class = \"list-inline\">\n                <a href = \"https://www.linkedin.com/in/ankur-gupta-0805a11a7/\">\n                    <img src = \"/linkedin-icon.svg\" class = \"icon\"/>\n                </a>\n            </li>\n            <li class = \"list-inline\">\n                <a href = \"/\">\n                    <img src = \"/gmail-icon.svg\" class = \"icon\"/>\n                </a>\n            </li>  \n        </ul>\n    </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}